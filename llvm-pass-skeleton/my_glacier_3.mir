--- |
  ; ModuleID = 'my_glacier.mir'
  source_filename = "glacier.c"
  target datalayout = "e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-n32:64-S128-Fn32"
  target triple = "arm64-apple-macosx26.0.0"
  
  ; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
  define i32 @main() #0 {
  entry:
    %retval = alloca i32, align 4
    %a = alloca i32, align 4
    %b = alloca i32, align 4
    store i32 0, ptr %retval, align 4
    %0 = load i32, ptr %a, align 4
    %1 = load i32, ptr %b, align 4
    %add = add nsw i32 %0, %1
    store i32 %add, ptr %a, align 4
    ret i32 1
  }
  
  attributes #0 = { noinline nounwind optnone ssp uwtable(sync) "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+altnzcv,+ccdp,+ccidx,+ccpp,+complxnum,+crc,+dit,+dotprod,+flagm,+fp-armv8,+fp16fml,+fptoint,+fullfp16,+jsconv,+lse,+neon,+pauth,+perfmon,+predres,+ras,+rcpc,+rdm,+sb,+sha2,+sha3,+specrestrict,+ssbs,+v8.1a,+v8.2a,+v8.3a,+v8.4a,+v8a" }
  
  !llvm.module.flags = !{!0, !1, !2, !3}
  !llvm.ident = !{!4}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 8, !"PIC Level", i32 2}
  !2 = !{i32 7, !"uwtable", i32 1}
  !3 = !{i32 7, !"frame-pointer", i32 1}
  !4 = !{!"clang version 22.0.0git (git@github.com:llvm/llvm-project.git 7e55a4c9937dfc2184636ad7f3c9f7eccfad6186)"}
...
---
name:            main
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
noPhis:          true
isSSA:           false
noVRegs:         false
hasFakeUses:     false
callsEHReturn:   false
callsUnwindInit: false
hasEHContTarget: false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gpr32, preferred-register: '', flags: [  ] }
  - { id: 1, class: gpr32, preferred-register: '', flags: [  ] }
  - { id: 2, class: gpr32, preferred-register: '', flags: [  ] }
  - { id: 3, class: gpr32, preferred-register: '', flags: [  ] }
  - { id: 4, class: gpr32, preferred-register: '', flags: [  ] }
  - { id: 5, class: gpr32, preferred-register: '', flags: [  ] }
  - { id: 6, class: gpr32, preferred-register: '', flags: [  ] }
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  isCalleeSavedInfoValid: false
  localFrameSize:  12
fixedStack:      []
stack:
  - { id: 0, name: retval, type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      local-offset: -4, debug-info-variable: '', debug-info-expression: '', 
      debug-info-location: '' }
  - { id: 1, name: a, type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      local-offset: -8, debug-info-variable: '', debug-info-expression: '', 
      debug-info-location: '' }
  - { id: 2, name: b, type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      local-offset: -12, debug-info-variable: '', debug-info-expression: '', 
      debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    liveins: $lr, $lr_xzr, $fp, $x28_fp, $x22_x23_x24_x25_x26_x27_x28_fp, $x19, $x18_x19, $x12_x13_x14_x15_x16_x17_x18_x19, $x14_x15_x16_x17_x18_x19_x20_x21, $x16_x17_x18_x19_x20_x21_x22_x23, $x18_x19_x20_x21_x22_x23_x24_x25, $x20, $x20_x21, $x20_x21_x22_x23_x24_x25_x26_x27, $x21, $x22, $x22_x23, $x23, $x24, $x24_x25, $x25, $x26, $x26_x27, $x27, $x28, $d8, $q8, $z8, $d7_d8, $d8_d9, $d6_d7_d8, $d5_d6_d7_d8, $d7_d8_d9, $d6_d7_d8_d9, $d8_d9_d10, $d7_d8_d9_d10, $d8_d9_d10_d11, $q7_q8, $q8_q9, $q6_q7_q8, $q5_q6_q7_q8, $q7_q8_q9, $q6_q7_q8_q9, $q8_q9_q10, $q7_q8_q9_q10, $q8_q9_q10_q11, $z7_z8, $z8_z9, $z6_z7_z8, $z5_z6_z7_z8, $z7_z8_z9, $z6_z7_z8_z9, $z8_z9_z10, $z7_z8_z9_z10, $z8_z9_z10_z11, $z0_z8, $z0_z4_z8_z12, $d9, $q9, $z9, $d9_d10, $d9_d10_d11, $d9_d10_d11_d12, $q9_q10, $q9_q10_q11, $q9_q10_q11_q12, $z9_z10, $z9_z10_z11, $z9_z10_z11_z12, $z1_z9, $z1_z5_z9_z13, $d10, $q10, $z10, $d10_d11, $d10_d11_d12, $d10_d11_d12_d13, $q10_q11, $q10_q11_q12, $q10_q11_q12_q13, $z10_z11, $z10_z11_z12, $z10_z11_z12_z13, $z2_z10, $z2_z6_z10_z14, $d11, $q11, $z11, $d11_d12, $d11_d12_d13, $d11_d12_d13_d14, $q11_q12, $q11_q12_q13, $q11_q12_q13_q14, $z11_z12, $z11_z12_z13, $z11_z12_z13_z14, $z3_z11, $z3_z7_z11_z15, $d12, $q12, $z12, $d12_d13, $d12_d13_d14, $d12_d13_d14_d15, $q12_q13, $q12_q13_q14, $q12_q13_q14_q15, $z12_z13, $z12_z13_z14, $z12_z13_z14_z15, $z4_z12, $d13, $q13, $z13, $d13_d14, $d13_d14_d15, $d13_d14_d15_d16, $q13_q14, $q13_q14_q15, $q13_q14_q15_q16, $z13_z14, $z13_z14_z15, $z13_z14_z15_z16, $z5_z13, $d14, $q14, $z14, $d14_d15, $d14_d15_d16, $d14_d15_d16_d17, $q14_q15, $q14_q15_q16, $q14_q15_q16_q17, $z14_z15, $z14_z15_z16, $z14_z15_z16_z17, $z6_z14, $d15, $q15, $z15, $d15_d16, $d15_d16_d17, $d15_d16_d17_d18, $q15_q16, $q15_q16_q17, $q15_q16_q17_q18, $z15_z16, $z15_z16_z17, $z15_z16_z17_z18, $z7_z15
  
    STRWui $wzr, %stack.0.retval, 0 :: (store (s32) into %stack.0.retval)
    %6:gpr32 = LDRWui %stack.1.a, 0 :: (load (s32) from %stack.1.a)
    %5:gpr32 = LDRWui %stack.2.b, 0 :: (load (s32) from %stack.2.b)
    %4:gpr32 = ADDWrr killed %6, killed %5
    STRWui killed %4, %stack.1.a, 0 :: (store (s32) into %stack.1.a)
    %0:gpr32 = MOVi32imm 1
    $w0 = COPY killed %0
    RET_ReallyLR implicit killed $w0
...
